# -*- coding: utf-8 -*-
"""FDS_Exp_9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a1P9dxYioToRFAsV4I2nBA_s9deRHWGf
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer # Import SimpleImputer
from sklearn.linear_model import LogisticRegression

# Load dataset
data = pd.read_csv('/content/Cancer_Data.csv')

# Handle missing values in numeric columns
numeric_data = data.select_dtypes(include=['number'])
data[numeric_data.columns] = numeric_data.fillna(numeric_data.mean())

target_column = 'Target' if 'Target' in data.columns else 'diagnosis'

X = data.drop(columns=[target_column])
y = data[target_column]

# Impute missing values using SimpleImputer before scaling
imputer = SimpleImputer(strategy='mean') # Create an imputer instance
X = imputer.fit_transform(X) # Fit and transform the imputer on your feature data

# Scale the features using the imputed data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X) # Use the imputed data (X) for scaling

# Split data using the scaled, imputed data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train model
model = LogisticRegression()
model.fit(X_train, y_train)

# Test model
y_pred = model.predict(X_test)

# Evaluate performance
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")
print(classification_report(y_test, y_pred))

!pip install mlflow

import mlflow
import mlflow.sklearn

mlflow.set_experiment("Cancer Detection with Logistic Regression")

with mlflow.start_run():
    # Indent the following lines within the 'with' block
    mlflow.log_param("model_type", "Logistic Regression")
    mlflow.log_metric("accuracy", accuracy)
    mlflow.sklearn.log_model(model, "model")
    print("Model logged in MLflow.")

!pip install streamlit

import streamlit as st
import numpy as np
import joblib

# Save the trained model to a file
joblib.dump(model, 'logistic_regression_model.pkl')

# Now you can load the model from the file
model = joblib.load('logistic_regression_model.pkl')

# Streamlit app
st.title("Cancer Detection App")
st.markdown("Predict if the cancer is **Benign (0)** or **Malignant (1)** based on clinical data.")
# Input fields
age = st.number_input("Age")
tumor_size = st.number_input("Tumor Size")
biomarker = st.number_input("Biomarker Level")

# Predict button
if st.button("Predict"):
    # Indent the following lines within the 'if' block
    input_data = np.array([[age, tumor_size, biomarker]])
    prediction = model.predict(input_data)[0]
    st.write("Prediction: Malignant" if prediction == 1 else "Prediction: Benign")

!apt-get update
!apt-get install docker.io -y
!service docker start
!docker --version

# Commented out IPython magic to ensure Python compatibility.
# %%writefile Dockerfile
# FROM python:3.9
# WORKDIR /app
# COPY . /app
# RUN pip install -r requirements.txt
# CMD ["streamlit", "run", "app.py", "--server.port=8501","--server.enableCORS=false"]
# 
# !ls -l

!docker build -t cancer-detection-logistic .
!docker run -p 8501:8501 cancer-detection-logistic

!docker login -u <falakmalik> -p <kukkumalik813>

!docker tag cancer-detection-logistic <falakmalik>/cancer-detection-logistic:latest

!docker push <falakmalik>/cancer-detection-logistic:latest